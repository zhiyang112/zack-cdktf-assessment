name: Run Integration Tests

on:
  push:
    paths-ignore:
      - "README.md"
    branches:
      - main
  pull_request:
    types: [labeled]
  workflow_dispatch:

jobs:
  # unittest:
  #   if: ${{ (github.event_name == 'workflow_dispatch') || (github.event.label.name == 'deploy') }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out GitHub repository
  #       uses: actions/checkout@v4

  #     - name: Setup Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ env.PYTHON_VERSION }}

  #     - name: Set up Poetry
  #       uses: abatilo/actions-poetry@v3.0.0
  #       with:
  #         poetry-version: 1.7.1

  #     - name: Install dependencies
  #       run: |
  #         poetry install

  #     - name: Execute unit test
  #       run: |
  #         poetry run python -m pytest main-test.py -v

  run-it-tests-job:
    if: ${{ (github.event_name == 'workflow_dispatch') || (github.event.label.name == 'deploy') }}
    runs-on: ubuntu-latest
    env:
      TERRAFORM_BINARY_NAME: tflocal
      TERRAFORM_VERSION: 1.7.3
      NODE_VERSION: 18
    steps:
      - name: Check out GitHub repository
        uses: actions/checkout@v4

      - name: Set up Typescript
        id: setup-typescript
        run: npm install -g typescript

      - name: Start LocalStack
        run: |
          # Install localstack
          curl -Lo localstack-cli-3.2.0-linux-arm64-onefile.tar.gz \
          https://github.com/localstack/localstack-cli/releases/download/v3.2.0/localstack-cli-3.2.0-linux-arm64-onefile.tar.gz
          # Pull LocalStack Docker image
          docker pull localstack/localstack
          # Start LocalStack in the background
          LS_LOG=localstack start -d
          # Wait 30 seconds for the LocalStack container to become ready before timing out
          echo "Waiting for LocalStack startup..."
          localstack wait -t 30
          echo "Startup complete"

      - name: Install Terraform Local
        run: |
          pip install terraform-local
          tflocal init

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install website dependencies
        run: npm --prefix website ci

      - name: Install cdktf
        id: install-cdktf
        run: npm i -g cdktf-cli@0.20.3

      - name: Install tfenv
        id: install-tfenv
        run: |
          git clone https://github.com/tfutils/tfenv.git ${HOME}/.tfenv
          
          export PATH="${HOME}/.tfenv/bin:${PATH}"
          echo 'export PATH="$HOME/.tfenv/bin:$PATH"' >> ${HOME}/.profile

          tfenv install ${{ env.TERRAFORM_VERSION }}
          tfenv use ${{ env.TERRAFORM_VERSION }}

      ## CDKTF synth and deploy
      - name: CDKTF synth
        run: |
          cdktf get
          cdktf synth

      - name: Deploy Backend with CDKTF
        working-directory: ./src
        run: |
          cdktf deploy iac-assignment-backend --auto-approve

      # - name: Deploy Frontend with CDKTF
      #   working-directory: ./src
      #   run: |
      #     cdktf deploy iac-assignment-frontend --auto-approve

      # - name: Run Tests
      #   env:
      #     AWS_DEFAULT_REGION: us-east-1
      #     AWS_REGION: us-east-1
      #     AWS_ACCESS_KEY_ID: test
      #     AWS_SECRET_ACCESS_KEY: test
      #   run: |
      #     pipenv run pytest -v tests

      - name: Show localstack logs
        if: always()
        run: |
          pipenv run localstack logs

      - name: Generate a Diagnostic Report
        if: failure()
        run: |
          curl -s localhost:4566/_localstack/diagnose | gzip -cf > diagnose.json.gz

      - name: Upload the Diagnostic Report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: diagnose.json.gz
          path: ./diagnose.json.gz
